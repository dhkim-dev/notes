exit
res_
res_ = res.ok_value_or_else do |errors|
  p errors # no role
  "fallback return val" # no role
end
res = Shopify::Adt::Result.ok("good")
res_
res_ = res.ok_value_or_else do |errors|
  p errors
  "fallback return val"
end
res = Shopify::Adt::Result.error("bad")
try_something
def try_something
  Shopify::Adt::Result.error(1).ok_value_or_else do |errors|
    p errors
    return 2
  end
end
try_something
def try_something
  Shopify::Adt::Result.error(1).ok_value_or_else do |errors|
    p errors
    return
  end
end
res
res = Shopify::Adt::Result.ok(0)
res.class
res
res = Shopify::Adt::Result.ok(0) 
res.ok?
res = Shopify::Adt::Result.error(1)
res.ok_value
res.error_value
res.error?
res = Shopify::Adt::Result.error(1)
res.and_then do |price| 
  Shopify::Adt::Result.ok("#{price} X")
end
res = Shopify::Adt::Result.error("Bad")
res.and_then do |price| 
  Shopify::Adt::Result.ok("#{price} $")
end
res.and_then do |price| 
  "#{price} $"
end
res.and_then do { |price| "#{price} $" }
res = Shopify::Adt::Result.ok("Good")
res.map { |price| "#{price} $" }
res = Shopify::Adt::Result.error("Bad")
res.map { |price| "#{price} $" }
res = Shopify::Adt::Result.ok("Good")
res.ok_value_or(3)
res
res.or_else(3)
res.or_value(4)
res.ok_value
res = Shopify::Adt::Result.ok("Good")
res_
res_ = res.ok_value_or_else do |errors|
  p "#"
  handle_error(errors)
  p "#"
  "not messed up"
end
res = Shopify::Adt::Result.ok("up")
res = Shopify::Adt::Result.error("messed up")
exit
res_
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  "not messed up"
end
res = Shopify::Adt::Result.ok("yogi messed up")
res_
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  "not messed up"
end
res = Shopify::Adt::Result.error("messed up")
exit
load!
reload!
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  "not messed up"
end
res = Shopify::Adt::Result.error("messed up")
exit
res_
exit
res_
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  # return default
end
res = Shopify::Adt::Result.ok(1)
res_
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  nil
end
res = Shopify::Adt::Result.error(1)
res_
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  return
end
def handle_error(errors)
  p errors
end
res_ = res.ok_value_or_else do |errors|
  handle_error(errors)
  return
end
res = Shopify::Adt::Result.error(1)
res_
res_ = res.ok_value_or_else do |errors|
  p errors.upcase
  0
end
res = Shopify::Adt::Result.error("SKRRT")
res_
res_ = res.ok_value_or_else do |errors|
  p errors.upcase
  0
end
res = Shopify::Adt::Result.ok("SKRRT")
"ab".upcase
res_
res_ = res.ok_value_or_else do |errors|
  p errors
  0
end
res = Shopify::Adt::Result.ok(1)
res_
res_ = res.ok_value_or_else do |errors|
  p errors
  0
end
res.ok_value_or_else do |errors|
  p errors
  0
end
res = Shopify::Adt::Result.error(1)
res.ok_value_or(2)
res = Shopify::Adt::Result.error(1)
res.ok_value_or(1)
res = Shopify::Adt::Result.ok(0)
res.ok_value
res.error_value
res = Shopify::Adt::Result.error(1)
res.ok_value
res.error_value
res = Shopify::Adt::Result.ok(0)
Shopify::Adt::Result.methods - Object.methods
Shopify::Adt::Result.methods
res.methods - Object.new.methods
res.methods
res.ok
res.ok_value
res.ok?
exit
require "shopify/adt"
p $LOAD_PATH
require "shopify-adt"
c
